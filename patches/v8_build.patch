diff --git a/config/BUILD.gn b/config/BUILD.gn
index d5bc52240..cab9c7e49 100644
--- a/config/BUILD.gn
+++ b/config/BUILD.gn
@@ -288,7 +288,7 @@ group("shared_library_deps") {
 # Executable configs -----------------------------------------------------------
 
 # Windows linker setup for EXEs and DLLs.
-if (is_win) {
+if (is_win && !use_zig_tc) {
   _windows_linker_configs = [
     "//build/config/win:sdk_link",
     "//build/config/win:common_linker_setup",
@@ -299,9 +299,9 @@ if (is_win) {
 config("executable_config") {
   configs = []
 
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     configs += _windows_linker_configs
-  } else if (is_mac) {
+  } else if (is_mac && !use_zig_tc) {
     configs += [ "//build/config/mac:mac_dynamic_flags" ]
   } else if (is_ios) {
     configs += [
@@ -334,9 +334,9 @@ config("executable_config") {
 config("shared_library_config") {
   configs = []
 
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     configs += _windows_linker_configs
-  } else if (is_mac) {
+  } else if (is_mac && !use_zig_tc) {
     configs += [ "//build/config/mac:mac_dynamic_flags" ]
   } else if (is_ios) {
     configs += [
diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index fcc7e1283..627b8253c 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -153,6 +153,15 @@ declare_args() {
   # DON'T ADD MORE FLAGS HERE. Read the comment above.
 }
 
+declare_args() {
+  use_zig_tc = false
+  cxx_use_ld = "ldd"
+  zig_cc = ""
+  zig_cxx = ""
+  host_zig_cc = ""
+  host_zig_cxx = ""
+}
+
 declare_args() {
   # Debug build. Enabling official builds automatically sets is_debug to false.
   is_debug = !is_official_build
@@ -348,7 +357,7 @@ default_compiler_configs = [
   "//build/config/sanitizers:default_sanitizer_flags",
 ]
 
-if (is_win) {
+if (is_win && !use_zig_tc) {
   default_compiler_configs += [
     "//build/config/win:default_cfg_compiler",
     "//build/config/win:default_crt",
@@ -405,7 +414,7 @@ set_defaults("rust_proc_macro") {
 
 # Compute the set of configs common to all linked targets (shared libraries,
 # loadable modules, executables) to avoid duplication below.
-if (is_win) {
+if (is_win && !use_zig_tc) {
   # Many targets remove these configs, so they are not contained within
   # //build/config:executable_config for easy removal.
   _linker_configs = [
@@ -415,7 +424,7 @@ if (is_win) {
     # that shouldn't use the windows subsystem.
     "//build/config/win:console",
   ]
-} else if (is_mac) {
+} else if (is_mac && !use_zig_tc) {
   _linker_configs = [ "//build/config/mac:strip_all" ]
 } else {
   _linker_configs = []
@@ -427,7 +436,7 @@ default_executable_configs = default_compiler_configs + [
                                "//build/config:executable_config",
                              ] + _linker_configs
 
-if (is_win) {
+if (is_win && !use_zig_tc) {
   # Turn on linker CFI for executables, and position it so it can be removed
   # if needed.
   default_executable_configs += [ "//build/config/win:cfi_linker" ]
@@ -443,7 +452,7 @@ default_shared_library_configs = default_compiler_configs + [
                                    "//build/config:default_libs",
                                    "//build/config:shared_library_config",
                                  ] + _linker_configs
-if (is_win) {
+if (is_win && !use_zig_tc) {
   # Turn on linker CFI for DLLs, and position it so it can be removed if needed.
   default_shared_library_configs += [ "//build/config/win:cfi_linker" ]
 }
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index e49fc28c0..870d9cd05 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -266,7 +266,7 @@ config("compiler") {
   # System-specific flags. If your compiler flags apply to one of the
   # categories here, add it to the associated file to keep this shared config
   # smaller.
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     configs += [ "//build/config/win:compiler" ]
   } else if (is_android) {
     configs += [ "//build/config/android:compiler" ]
@@ -277,7 +277,7 @@ config("compiler") {
     }
   } else if (is_nacl) {
     configs += [ "//build/config/nacl:compiler" ]
-  } else if (is_mac) {
+  } else if (is_mac && !use_zig_tc) {
     configs += [ "//build/config/mac:compiler" ]
   } else if (is_ios) {
     configs += [ "//build/config/ios:compiler" ]
@@ -298,6 +298,11 @@ config("compiler") {
     ":compiler_deterministic",
   ]
 
+  if (use_zig_tc) {
+    # We'll provide the target flags from build.zig.
+    configs -= [ ":compiler_cpu_abi" ]
+  }
+
   # Here we enable -fno-delete-null-pointer-checks, which makes various nullptr
   # operations (e.g. dereferencing) into defined behavior. This avoids deletion
   # of some security-critical code: see https://crbug.com/1139129.
@@ -350,7 +355,7 @@ config("compiler") {
     }
 
     if (use_lld) {
-      ldflags += [ "-fuse-ld=lld" ]
+      ldflags += [ "-fuse-ld=${cxx_use_ld}" ]
       if (lld_path != "") {
         ldflags += [ "-B$lld_path" ]
       }
@@ -552,7 +557,7 @@ config("compiler") {
     }
 
     # TODO(crbug.com/1235145): Investigate why/if this should be needed.
-    if (is_win) {
+    if (is_win && !use_zig_tc) {
       cflags += [ "/clang:-ffp-contract=off" ]
     } else {
       cflags += [ "-ffp-contract=off" ]
@@ -597,7 +602,7 @@ config("compiler") {
     } else {
       cflags_cc += [ "-std=${standard_prefix}++17" ]
     }
-  } else if (is_win) {
+  } else if (is_win && !use_zig_tc) {
     cflags_cc += [ "/std:c++17" ]
   } else if (!is_nacl) {
     # TODO(mcgrathr) - the NaCl GCC toolchain doesn't support either gnu11/gnu++11
@@ -629,7 +634,7 @@ config("compiler") {
   # allocation behavior (and do that on all platforms so that we have
   # consistent behavior across platforms), to make the change more incremental.
   if (!is_nacl || is_nacl_saigo) {
-    if (is_win) {
+    if (is_win && !use_zig_tc) {
       cflags_cc += [ "/Zc:alignedNew-" ]
     } else {
       cflags_cc += [ "-fno-aligned-new" ]
@@ -1377,14 +1382,16 @@ config("runtime_library") {
   # System-specific flags. If your compiler flags apply to one of the
   # categories here, add it to the associated file to keep this shared config
   # smaller.
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     configs += [ "//build/config/win:runtime_library" ]
   } else if (is_linux || is_chromeos) {
     configs += [ "//build/config/linux:runtime_library" ]
   } else if (is_ios) {
     configs += [ "//build/config/ios:runtime_library" ]
   } else if (is_mac) {
-    configs += [ "//build/config/mac:runtime_library" ]
+    if (!use_zig_tc) {
+      configs += [ "//build/config/mac:runtime_library" ]
+    }
   } else if (is_android) {
     configs += [ "//build/config/android:runtime_library" ]
   }
@@ -1405,7 +1412,7 @@ config("default_warnings") {
   cflags_cc = []
   ldflags = []
 
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     if (treat_warnings_as_errors) {
       cflags += [ "/WX" ]
     }
@@ -1580,7 +1587,7 @@ config("prevent_unsafe_narrowing") {
 # part of Chromium.
 
 config("chromium_code") {
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     if (is_clang) {
       cflags = [ "/W4" ]  # Warning level 4.
 
@@ -1676,7 +1683,7 @@ config("no_chromium_code") {
   cflags_cc = []
   defines = []
 
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     if (is_clang) {
       cflags += [ "/W3" ]  # Warning level 3.
     }
@@ -1781,7 +1788,7 @@ config("rtti") {
 config("no_rtti") {
   # Some sanitizer configs may require RTTI to be left enabled globally
   if (!use_rtti) {
-    if (is_win) {
+    if (is_win && !use_zig_tc) {
       cflags_cc = [ "/GR-" ]
     } else {
       cflags_cc = [ "-fno-rtti" ]
@@ -1823,7 +1830,7 @@ config("thin_archive") {
   # archives.
   # TODO(crbug.com/1221615): Enable on is_apple if use_lld once that no longer
   # confuses lldb.
-  if ((is_posix && !is_nacl && !is_apple) || is_fuchsia) {
+  if ((is_posix && !is_nacl && !is_apple) || is_fuchsia || use_zig_tc) {
     arflags = [ "-T" ]
   } else if (is_win && use_lld) {
     arflags = [ "/llvmlibthin" ]
@@ -1915,7 +1922,7 @@ config("no_incompatible_pointer_warnings") {
 
 # Shared settings for both "optimize" and "optimize_max" configs.
 # IMPORTANT: On Windows "/O1" and "/O2" must go before the common flags.
-if (is_win) {
+if (is_win && !use_zig_tc) {
   common_optimize_on_cflags = [
     "/Ob2",  # Both explicit and auto inlining.
     "/Oy-",  # Disable omitting frame pointers, must be after /O2.
@@ -2021,7 +2028,7 @@ config("default_stack_frames") {
 
 # Default "optimization on" config.
 config("optimize") {
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     if (chrome_pgo_phase != 2) {
       # Favor size over speed, /O1 must be before the common flags.
       # /O1 implies /Os and /GF.
@@ -2111,7 +2118,7 @@ config("optimize_max") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_win && !use_zig_tc) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2144,7 +2151,7 @@ config("optimize_speed") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_win && !use_zig_tc) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
diff --git a/config/linux/BUILD.gn b/config/linux/BUILD.gn
index 2137ed81d..4014edee2 100644
--- a/config/linux/BUILD.gn
+++ b/config/linux/BUILD.gn
@@ -43,7 +43,10 @@ config("runtime_library") {
   if ((!(is_chromeos_ash || is_chromeos_lacros) ||
        default_toolchain != "//build/toolchain/cros:target") &&
       (!use_custom_libcxx || current_cpu == "mipsel")) {
-    libs = [ "atomic" ]
+    if (!use_zig_tc) {
+      # -latomic won't be found when using zig tc, it's already compiled from zig libcxx source
+      libs = [ "atomic" ]
+    }
   }
 }
 
diff --git a/config/sysroot.gni b/config/sysroot.gni
index 18d2d5736..0b1689b7d 100644
--- a/config/sysroot.gni
+++ b/config/sysroot.gni
@@ -67,7 +67,7 @@ if (sysroot == "") {
                       "string") == "True",
           "Missing sysroot ($sysroot). To fix, run: build/linux/sysroot_scripts/install-sysroot.py --arch=$_script_arch")
     }
-  } else if (is_mac) {
+  } else if (is_mac && !use_zig_tc) {
     import("//build/config/mac/mac_sdk.gni")
     sysroot = mac_sdk_path
   } else if (is_ios) {
diff --git a/toolchain/gcc_toolchain.gni b/toolchain/gcc_toolchain.gni
index 0ad4537a3..6b0f4d198 100644
--- a/toolchain/gcc_toolchain.gni
+++ b/toolchain/gcc_toolchain.gni
@@ -348,11 +348,13 @@ template("gcc_toolchain") {
       extra_ldflags = ""
     }
 
+    if (!use_zig_tc) {
     if (system_headers_in_deps) {
       md = "-MD"
     } else {
       md = "-MMD"
     }
+    }
 
     enable_linker_map = defined(invoker.enable_linker_map) &&
                         invoker.enable_linker_map && generate_linker_map
@@ -367,7 +369,11 @@ template("gcc_toolchain") {
     tool("cc") {
       depfile = "{{output}}.d"
       precompiled_header_type = "gcc"
-      command = "$cc $md -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}${extra_cppflags}${extra_cflags} -c {{source}} -o {{output}}"
+      if (use_zig_tc) {
+        command = "$cc ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}${extra_cppflags}${extra_cflags} -c {{source}} -o {{output}}"
+      } else {
+        command = "$cc $md -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}${extra_cppflags}${extra_cflags} -c {{source}} -o {{output}}"
+      }
       depsformat = "gcc"
       description = "CC {{output}}"
       outputs = [ "$object_subdir/{{source_name_part}}.o" ]
@@ -376,7 +382,11 @@ template("gcc_toolchain") {
     tool("cxx") {
       depfile = "{{output}}.d"
       precompiled_header_type = "gcc"
-      command = "$cxx $md -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}${extra_cppflags}${extra_cxxflags} -c {{source}} -o {{output}}"
+      if (use_zig_tc) {
+        command = "$cxx ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}${extra_cppflags}${extra_cxxflags} -c {{source}} -o {{output}}"
+      } else {
+        command = "$cxx $md -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}${extra_cppflags}${extra_cxxflags} -c {{source}} -o {{output}}"
+      }
       depsformat = "gcc"
       description = "CXX {{output}}"
       outputs = [ "$object_subdir/{{source_name_part}}.o" ]
@@ -385,7 +395,11 @@ template("gcc_toolchain") {
     tool("asm") {
       # For GCC we can just use the C compiler to compile assembly.
       depfile = "{{output}}.d"
-      command = "$asm $md -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{asmflags}}${extra_asmflags} -c {{source}} -o {{output}}"
+      if (use_zig_tc) {
+        command = "$asm ${rebuild_string}{{defines}} {{include_dirs}} {{asmflags}}${extra_asmflags} -c {{source}} -o {{output}}"
+      } else {
+        command = "$asm $md -MF $depfile ${rebuild_string}{{defines}} {{include_dirs}} {{asmflags}}${extra_asmflags} -c {{source}} -o {{output}}"
+      }
       depsformat = "gcc"
       description = "ASM {{output}}"
       outputs = [ "$object_subdir/{{source_name_part}}.o" ]
@@ -399,7 +413,11 @@ template("gcc_toolchain") {
       } else {
         rspfile = "{{output}}.rsp"
         rspfile_content = "{{inputs}}"
-        command = "\"$ar\" {{arflags}} -r -c -s -D {{output}} @\"$rspfile\""
+        if (use_zig_tc) {
+          command = "$ar {{arflags}} -r -c -s -D {{output}} @\"$rspfile\""
+        } else {
+          command = "\"$ar\" {{arflags}} -r -c -s -D {{output}} @\"$rspfile\""
+        }
       }
 
       # Remove the output file first so that ar doesn't try to modify the
